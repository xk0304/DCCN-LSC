clear
close all
clc

% load the CT data set
training_dir = 'D:\yuming\data_2\training\';
Validation_dir = 'D:\yuming\data_2\testing\';
imdsTrain = imageDatastore(training_dir, ...
    'IncludeSubfolders',true, ...
    'LabelSource','foldernames'); 
imdsValidation = imageDatastore(Validation_dir, ...
    'IncludeSubfolders',true, ...
    'LabelSource','foldernames'); 

% construct the dccnlsc model
inputSize = [128 128 3];
lgraph = model_dccnlsc(inputSize,2);

% Specify augmentation operations to perform on the training images. 
% Data augmentation helps prevent the network from overfitting and memorizing the exact details of the training images.  
pixelRange = [-30 30];
scaleRange = [0.9 1.1];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange, ...
    'RandXScale',scaleRange, ...
    'RandYScale',scaleRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain, ...
    'DataAugmentation',imageAugmenter);
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation);

% Specify the training options. 
learn_rate = 5e-3;
miniBatchSize = 16;
valFrequency = floor(numel(augimdsTrain.Files)/miniBatchSize);
options = trainingOptions('adam', ...
    'MiniBatchSize',miniBatchSize, ...
    'MaxEpochs',1, ...
    'InitialLearnRate',learn_rate, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',valFrequency, ...
    'Verbose',false, ...
    'Plots','training-progress' ,...
    'CheckpointPath','',...
    'LearnRateDropFactor',0.2, ...
    'LearnRateDropPeriod',2);

% training
[net,train_info] = trainNetwork(augimdsTrain,lgraph,options);

% ///////////////////////////////////////////////////////
% Classify the validation images using the trained network, and calculate the classification accuracy.
[Validation_YPred,Validation_probs] = classify(net,augimdsValidation);
Validation_accuracy = mean(Validation_YPred == imdsValidation.Labels)
[training_YPred,training_probs] = classify(net,augimdsTrain);
training_accuracy = mean(training_YPred == imdsTrain.Labels)